/**
 * Pay Invoice Request
 */

export interface PayStripeAgreementInvoiceRequest {
    /**
     * The Loop invoice ID to pay
     * @example "d5f55138-881f-406d-bfa0-a574be64cf49"
     */
    invoiceId?: string;
    /**
     * The Stripe invoice ID to pay. Should start with "in_".
     * @example "in_123490aa"
     */
    externalInvoiceId?: string;
}

/**
 * Pay Invoice Response
 */

export interface GeneralAgreementInvoiceElementResponse {
    /**
     * ID for the agreement invoice
     * @example "1234-5678-9012"
     */
    id: string;
    /**
     * Agreement Invoice ID
     * @example 12234-533678-92012
     */
    agreementInvoiceID: string;
    /**
     * Quantity of the agreement invoice element
     * @example 1
     */
    quantity: number;
    /**
     * Agreement Invoice Element Name
     * @example Starter Plan
     */
    name: string;
    /**
     * Amount of the agreement invoice element in cents
     * @example 1999
     */
    amount: string | null;
    /**
     * Amount of the agreement invoice element discount in cents
     * @example 1.99
     */
    discountAmount: number | null;
    /**
     * The date the element was created formatted as a Unix timestamp in seconds
     * @example "1664096943"
     */
    createdDate: number;
}

export interface GeneralAgreementInvoiceElementsResponse {
    /**
     * List of agreement invoice elements
     */
    elements: GeneralAgreementInvoiceElementResponse[];
}

export interface GeneralAgreementInvoiceResponse {
    /**
     * ID for the agreement invoice
     * @example "1234-5678-9012"
     */
    id: string;
    /**
     * Invoice ID
     * @example INV-1234567890
     */
    invoiceId: string;
    /**
     * List Agreement invoice elements
     */
    elements: GeneralAgreementInvoiceElementsResponse;
    /**
     * Agreement ID
     * @example 12234-533678-92012
     */
    agreementId: string;
    /**
     * Amount to be transferred in string format: either cents or token based.
     * @example "1212"
     */
    amount: string;
    /**
     * Token address to be transferred
     * @example 0x1234567890
     */
    token: string;
    /**
     * Transfer amount is USD or not
     * @example true
     */
    usd: boolean;
    /**
     * Status of the transfer.
     * Scheduled = 1
     * Paid = 2
     * Failed = 3
     * Cancelled = 4
     * Uncollectible = 5
     * Pending = 6
     * Draft = 7
     * @example 3
     */
    status: number;
    /**
     * ID of the blockchain network
     * @example 1
     */
    networkId: number;
    /**
     * Source of invoice/data for the transfer
     * Manual = 1
     * AutoGenerated = 2
     * Stripe = 3
     * Chargebee = 4
     * QuickBooks = 5
     * Xero = 6
     * @example 3
     */
    source: number;
    /**
     * A list of tags associated with the transfer
     * @example ["Salaries", "Marketing"]
     */
    tags: string[] | null;
    /**
     * Internal notes saved on the transfer
     * @example "This is July's payment"
     */
    notes: string | null;
    /**
     * ID for the entity receiving the transfer
     * @example "1234-5678-9012"
     */
    entityId: string;
    /**
     * Receiving wallet for the transfer
     * @example "1234-5678-9012"
     */
    toAddress: string;
    /**
     * Sending wallet for the transfer
     * @example "1234-5678-9012"
     */
    fromAddress: string;
    /**
     * Date the transfer is due and will process. In seconds
     * @example "1701974672"
     */
    billDate: number;
    /**
     * String version of the bill date
     * @example "Mon Oct 16 2023 21:41:59 GMT+0000 (Coordinated Universal Time)"
     */
    billDateTime: string;
    /**
     * Date the was paid. In seconds
     * @example "1701974672"
     */
    paidDate: number | null;
    /**
     * String version of the paid date
     * @example "Mon Oct 16 2023 21:41:59 GMT+0000 (Coordinated Universal Time)"
     */
    paidDateTime: string | null;
    /**
     * The date the transfer was created formatted as a Unix timestamp in seconds
     * @example "1664096943"
     */
    createdDate: number;
    /**
     * The decoded signature of the transfer
     */
    decodedSignature: { v: number; r: string; s: string } | null;
    /**
     * The count of attempts to pay invoice
     */
    attemptCount: number;
    /**
     * The first date payment attempted for the invoice
     */
    firstAttemptDate: number | null;
    /**
     * The latest date payment was attempted for the invoice
     */
    lastAttemptDate: number | null;
}

export interface GeneralAgreementInvoicesResponse {
    /**
     * A list of the returned agreement invoices based on the request
     */
    agreementInvoices: GeneralAgreementInvoiceResponse[];
}

export interface PayAgreementInvoiceResponse
    extends GeneralAgreementInvoiceResponse {
    /**
     * Transaction hash of the transfer sent to the contract for this invoice.
     * @example 0x123098656178
     */
    transactionHash: string | null;
}
